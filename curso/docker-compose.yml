services:
  # API gateway Traefik
  # -------------------------------------------------------------

  traefik:
    image: traefik:v3.3.3
    container_name: traefik
    command:
      - --api.insecure=true # Enable the Traefik dashboard (for development only)
      - --providers.docker # Use Docker as a provider
      - --entrypoints.web.address=:80 # Define the entry point for HTTP traffic
    ports:
      - "80:80" # Expose port 80 for HTTP
      - "8080:8080" # Expose port 8080 for the Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Allow Traefik to interact with Docker
    networks:
      - app-network

  # ELK stack (Elasticsearch, Logstash, Kibana)
  # -------------------------------------------------------------

  elasticsearch:
    build:
      context: ./docker/elasticsearch
      dockerfile: Dockerfile
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=elastic
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - app-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.17.1
    volumes:
      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=elastic
    depends_on:
      - elasticsearch
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.1
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_user
      - ELASTICSEARCH_PASSWORD=kibana
    depends_on:
      - elasticsearch
      - traefik
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.localhost`)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  # Monitoring services
  # -------------------------------------------------------------
  prometheus:
    image: prom/prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - app-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./docker/otel-collector/otel-collector-config.yml:/etc/otel-collector-config.yml
    command: [ "--config=/etc/otel-collector-config.yml" ]
    ports:
      - "4317:4317" # OTLP gRPC (Traces)
      - "4318:4318" # OTLP HTTP
      - "9464:9464" # Prometheus Metrics
    networks:
      - app-network

  jaeger:
    image: jaegertracing/jaeger:latest
    environment:
      - LOG_LEVEL=debug
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.localhost`)"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

  grafana:
    image: grafana/grafana
    volumes:
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    depends_on:
      - prometheus
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Users service
  # -------------------------------------------------------------

  db_users:
    image: postgres:latest
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/users:/var/lib/postgresql/data
    networks:
      - app-network

  cache_users:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis/users:/var/opt
    networks:
      - app-network

  app_users:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    environment:
      STAGE: local
      PATH_PREFIX: /users
    volumes:
      - ./services/users:/app
    depends_on:
      - db_users
      - cache_users
      - traefik
      - app_sessions
    networks:
      - app-network
    labels:
      - "traefik.enable=true" # Enable Traefik for this service
      - "traefik.http.routers.users.rule=PathPrefix(`/users`)" # Route requests with /api2 prefix
      - "traefik.http.routers.users.entrypoints=web" # Use the web entry point
      - "traefik.http.services.users.loadbalancer.server.port=8000" # Forward to port 5000 in th

  # Sessions service
  # -------------------------------------------------------------

  db_sessions:
    image: postgres:latest
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: postgres
    ports:
      - "5433:5432"
    volumes:
      - ./data/postgres/sessions:/var/lib/postgresql/data
    networks:
      - app-network

  cache_sessions:
    image: redis:latest
    ports:
      - "6380:6379"
    volumes:
      - ./data/redis/sessions:/var/opt
    networks:
      - app-network

  app_sessions:
    build:
      context: ./services/sessions
      dockerfile: Dockerfile
    environment:
      STAGE: local
      PATH_PREFIX: /sessions
    volumes:
      - ./services/sessions:/app
    depends_on:
      - db_sessions
      - cache_sessions
      - traefik
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sessions.rule=PathPrefix(`/sessions`)"
      - "traefik.http.routers.sessions.entrypoints=web"
      - "traefik.http.services.sessions.loadbalancer.server.port=8001"


networks:
  app-network:
    driver: bridge
